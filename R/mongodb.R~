library(rmongodb)
library(doParallel)

#Connect to mongodb
mongo <- mongo.create(host="127.0.0.1:27017")

#Returns TRUE if connection was succesfull
mongo.is.connected(mongo)

#Database
db <- "local"

#Check current databases
collections <- mongo.get.database.collections(mongo, db)

#Select collection where products are stored
collection <- collections[3]

#Collection where we insert the model data
insert_collection <- paste(db, "models", sep=".")

#Get all the values to array for given key
Ids <- mongo.get.values(mongo, collection , key = "ProductId1234")

######INSERTING DATA###############
HandleOneProduct <- function(productId) {
  #Query collection by product ID
  products <- mongo.find.all(mongo, collection, query = list(ProductId1234 = productId))
 
  #Create dataframe from the list of lists
  df <- do.call(rbind.data.frame, products)
  colnames(df)[3] <- "t"
  new <- min(df$t):max(df$t)
  #Fit polynomial model of order 3
  fit <- lm(stock ~ poly(t,3), data=df)
  
  ##
  fcast <- predict(fit, newdata=data.frame(t=new))
  plot(df$stock~df$t)
  lines(new, fcast,col="red")
  #
  
  
  #Extract coefficients from the fitted model
  coefficients <- as.numeric(fit$coefficients)
  

  #productId <- 1.0
  object <- list(ProductId = productId,
                 timestamp = max(df$t),
                 model = list(intercept = coefficients[1],
                              coef1 = coefficients[2],
                              coef2 = coefficients[3],
                              coef3 = coefficients[4]))
  
  #Insert or update model parameters to collection
    mongo.update(mongo, insert_collection, criteria = list(ProductId=productId), object, mongo.update.upsert)
    
  
 
} 

#Write model parameters to all products parallel
registerDoParallel(cores=2)

foreach(id=Ids) %dopar% HandleOneProduct(id)

#Disconnect
mongo.disconnect(mongo)
##################################
